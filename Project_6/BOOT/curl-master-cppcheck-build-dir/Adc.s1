Adc_lInitWriteClcSfr global:[TestAdc_DebugVarClc] call:[OS_ReadPeripheral32,OS_WritePeripheral32,SafeMcal_ReportError,TRUSTED_ApplResetEndInit,TRUSTED_ApplSetEndInit,return] noreturn:[SafeMcal_ReportError,return]
Adc_lDeInitWriteClcSfr global:[TestAdc_DebugVarClc] call:[OS_ReadPeripheral32,OS_WritePeripheral32,SafeMcal_ReportError,TRUSTED_ApplResetEndInit,TRUSTED_ApplSetEndInit,return] noreturn:[SafeMcal_ReportError,return]
Adc_lDisableResultInt call:[OS_ModifyPeripheral32] noreturn:[OS_ModifyPeripheral32]
Adc_lReadResult call:[OS_ReadPeripheral32,return] noreturn:[return]
Adc_lReadValidFlag call:[OS_ReadPeripheral32,return] noreturn:[return]
Adc_lDeInitWriteKernelRstSfr global:[TestAdc_DebugVarRst] call:[OS_ReadPeripheral32,OS_WritePeripheral32,TRUSTED_ApplResetEndInit,TRUSTED_ApplSetEndInit,while] noreturn:[while]
Adc_lInitWriteKernelRstSfr global:[TestAdc_DebugVarRst] call:[OS_ReadPeripheral32,OS_WritePeripheral32,TRUSTED_ApplResetEndInit,TRUSTED_ApplSetEndInit,while] noreturn:[while]
Adc_lWriteGlobCfgSfr call:[OS_WritePeripheral32] noreturn:[OS_WritePeripheral32]
Adc_lWriteGlobIpClassSfr call:[OS_WritePeripheral32] noreturn:[OS_WritePeripheral32]
Adc_lWriteGlobEvntNpSfr call:[OS_WritePeripheral32] noreturn:[OS_WritePeripheral32]
Adc_lWriteEmuxSelSfr call:[OS_WritePeripheral32] noreturn:[OS_WritePeripheral32]
Adc_lWriteArbCfgSfr call:[OS_WritePeripheral32] noreturn:[OS_WritePeripheral32]
Adc_lWriteArbPrSfr call:[OS_WritePeripheral32] noreturn:[OS_WritePeripheral32]
Adc_lWriteGrpIpClassSfr call:[OS_WritePeripheral32] noreturn:[OS_WritePeripheral32]
Adc_lWriteSynCtrSfr call:[OS_WritePeripheral32] noreturn:[OS_WritePeripheral32]
Adc_lWriteSrcEvntNpSfr call:[OS_WritePeripheral32] noreturn:[OS_WritePeripheral32]
Adc_lWriteEmuxCtrSfr call:[OS_WritePeripheral32] noreturn:[OS_WritePeripheral32]
Adc_lWriteSrcEvntClrFlagSfr call:[OS_WritePeripheral32] noreturn:[OS_WritePeripheral32]
Adc_lWriteChEvntClrFlagSfr call:[OS_WritePeripheral32] noreturn:[OS_WritePeripheral32]
Adc_lWriteGlobEvntFlagSfr call:[OS_WritePeripheral32] noreturn:[OS_WritePeripheral32]
Adc_lReadSrcEvntFlagSfr call:[OS_ReadPeripheral32,return] noreturn:[return]
Adc_lReadGlobEvntFlagSfr call:[OS_ReadPeripheral32,return] noreturn:[return]
Adc_lReadChEvntFlagSfr call:[OS_ReadPeripheral32,return] noreturn:[return]
Adc_lReadArbCfgSfr call:[OS_ReadPeripheral32,return] noreturn:[return]
Adc_lSetChEvntNodePtr call:[OS_WritePeripheral32] noreturn:[OS_WritePeripheral32]
Adc_lSetResEventNode call:[OS_WritePeripheral32] noreturn:[OS_WritePeripheral32]
Adc_lKernelConfigured global:[Adc_kConfigPtr] call:[return] noreturn:[return]
Adc_lQueueRSConfigured call:[return] noreturn:[return]
Adc_lAutoScanConfigured call:[return] noreturn:[return]
Adc_lBackgndScanConfigured call:[return] noreturn:[return]
Adc_lLimitChkConfigured call:[return] noreturn:[return]
Adc_lGetEmuxKernel call:[EXTRACT,return] noreturn:[return]
Adc_lGetAdcKernel call:[EXTRACT,return] noreturn:[return]
Adc_lGetKernelGroupId call:[return] noreturn:[return]
Adc_lSetGroupResultAtomic call:[Mcal_SetAtomic] noreturn:[Mcal_SetAtomic]
Adc_lClrGroupResultAtomic call:[Mcal_SetAtomic] noreturn:[Mcal_SetAtomic]
Adc_lGetGroupResult call:[EXTRACT,return] noreturn:[return]
Adc_lSetGroupStatusBusyAtomic call:[Mcal_SetAtomic] noreturn:[Mcal_SetAtomic]
Adc_lClrResBuffEndStatusAtomic call:[Mcal_SetAtomic] noreturn:[Mcal_SetAtomic]
Adc_lSetGroupStatusIdleAtomic call:[Mcal_SetAtomic] noreturn:[Mcal_SetAtomic]
Adc_lGetGroupStatus call:[EXTRACT,return] noreturn:[return]
Adc_lGetResBuffEndStatus call:[EXTRACT,return] noreturn:[return]
Adc_lResetTrigSrcData global:[Adc_BgndScanData]
Adc_lGetEmuxSelect call:[return] noreturn:[return]
Adc_lGetEmuxEnable call:[return] noreturn:[return]
Adc_lGetEmuxScan call:[return] noreturn:[return]
Adc_lGetGroupStatusAll call:[return] noreturn:[return]
Adc_lGetTimEnData call:[EXTRACT,return] noreturn:[return]
Adc_lGetEruData call:[EXTRACT,return] noreturn:[return]
Adc_SetupResultBuffer global:[Adc_kConfigPtr] call:[Adc_lCheckDriverState,Adc_lCheckInit,Adc_lGetAdcKernel,Adc_lGetDataAddress,Adc_lGetKernelGroupId,Adc_lValidateParamGroup,Det_ReportError,SafeMcal_ReportError,return] noreturn:[Adc_lCheckDriverState,Adc_lValidateParamGroup,return]
Adc_DeInit global:[Adc_InitStatus,Adc_kConfigPtr] call:[Adc_lCcu6DeInit,Adc_lCheckGroupStatusAll,Adc_lCheckInit,Adc_lDeInitSetResetSre,Adc_lDeInitWriteClcSfr,Adc_lDeInitWriteKernelRstSfr,Adc_lGetEmuxKernel,Det_ReportError,TRUSTED_Mcal_DmaResetDmaChannel,while] noreturn:[Det_ReportError,TRUSTED_Mcal_DmaResetDmaChannel]
Adc_StartGroupConversion call:[Adc_lCheckInit,Adc_lCheckStateForStartGroup,Adc_lGetAdcKernel,Adc_lGetKernelGroupId,Adc_lSchedulerOnStart,Adc_lSchmEnterStartGroup,Adc_lSchmExitStartGroup,Adc_lValidateParamGroup] noreturn:[Adc_lCheckStateForStartGroup,Adc_lSchedulerOnStart,Adc_lSchmExitStartGroup,Adc_lValidateParamGroup]
Adc_StopGroupConversion call:[Adc_lCheckDriverState,Adc_lCheckInit,Adc_lGetAdcKernel,Adc_lGetKernelGroupId,Adc_lSchedulerOnStop,Adc_lValidateParamGroup] noreturn:[Adc_lCheckDriverState,Adc_lSchedulerOnStop,Adc_lValidateParamGroup]
Adc_ReadGroup global:[Adc_kConfigPtr] call:[Adc_lCheckDriverState,Adc_lCheckInit,Adc_lClrGroupResultAtomic,Adc_lClrResBuffEndStatusAtomic,Adc_lGetAdcKernel,Adc_lGetDataAddress,Adc_lGetEmuxScan,Adc_lGetEmuxSelect,Adc_lGetGroupResult,Adc_lGetGroupStatus,Adc_lGetKernelGroupId,Adc_lSchmEnterReadGroup,Adc_lSchmExitReadGroup,Adc_lValidateParamGroup,SafeMcal_ReportError,return,while] noreturn:[Adc_lCheckDriverState,Adc_lValidateParamGroup,return]
Adc_EnableHardwareTrigger global:[Adc_BgndGrpCnt,Adc_BgndScanData,Adc_kConfigPtr] call:[Adc_lCheckInit,Adc_lCheckStateForEnableGroup,Adc_lClrGroupResultAtomic,Adc_lClrResBuffEndStatusAtomic,Adc_lGetAdcKernel,Adc_lGetDataAddress,Adc_lGetKernelGroupId,Adc_lPrepareGrpForStart,Adc_lSchmEnterEnableHwTrig,Adc_lSchmExitEnableHwTrig,Adc_lSetGroupStatusBusyAtomic,Adc_lStartHwConversionRS,Adc_lUpdateRsGroupData,Adc_lValidateParamGroup] noreturn:[Adc_lCheckStateForEnableGroup,Adc_lSchmExitEnableHwTrig,Adc_lStartHwConversionRS,Adc_lValidateParamGroup]
Adc_DisableHardwareTrigger global:[Adc_BgndGrpCnt,Adc_BgndScanData,Adc_kConfigPtr] call:[Adc_lCheckDriverState,Adc_lCheckInit,Adc_lClrGroupResultAtomic,Adc_lClrResBuffEndStatusAtomic,Adc_lGetAdcKernel,Adc_lGetDataAddress,Adc_lGetGroupStatus,Adc_lGetKernelGroupId,Adc_lResetTrigSrcData,Adc_lScheduleFromQueue,Adc_lScheduleNext,Adc_lSchmEnterDisableHwTrig,Adc_lSchmExitDisableHwTrig,Adc_lSetGroupStatusIdleAtomic,Adc_lStopConvRequestSource,Adc_lValidateParamGroup,Adc_lWriteEmuxCtrSfr,Mcal_SetAtomic] noreturn:[Adc_lCheckDriverState,Adc_lScheduleFromQueue,Adc_lScheduleNext,Adc_lSchmExitDisableHwTrig,Adc_lValidateParamGroup,Mcal_SetAtomic]
Adc_EnableGroupNotification call:[Adc_lCheckInit,Adc_lGetAdcKernel,Adc_lGetDataAddress,Adc_lGetKernelGroupId,Adc_lValidateParamGroup,Mcal_SetAtomic] noreturn:[Adc_lValidateParamGroup,Mcal_SetAtomic]
Adc_DisableGroupNotification call:[Adc_lCheckInit,Adc_lGetAdcKernel,Adc_lGetDataAddress,Adc_lGetKernelGroupId,Adc_lValidateParamGroup,Mcal_SetAtomic] noreturn:[Adc_lValidateParamGroup,Mcal_SetAtomic]
Adc_GetGroupStatus call:[Adc_lCheckInit,Adc_lGetAdcKernel,Adc_lGetDataAddress,Adc_lGetGroupResult,Adc_lGetGroupStatus,Adc_lGetKernelGroupId,Adc_lGetResBuffEndStatus,Adc_lSchmEnterGetGrpStatus,Adc_lSchmExitGetGrpStatus,Adc_lValidateParamGroup,return] noreturn:[Adc_lGetGroupStatus,Adc_lSchmExitGetGrpStatus,Adc_lValidateParamGroup,return]
Adc_GetStreamLastPointer global:[Adc_kConfigPtr] call:[Adc_lCheckDriverState,Adc_lCheckInit,Adc_lClrGroupResultAtomic,Adc_lClrResBuffEndStatusAtomic,Adc_lGetAdcKernel,Adc_lGetDataAddress,Adc_lGetGroupResult,Adc_lGetGroupStatus,Adc_lGetKernelGroupId,Adc_lGetResBuffEndStatus,Adc_lSchmEnterGetStreamLastPtr,Adc_lSchmExitGetStreamLastPtr,Adc_lValidateParamGroup,return] noreturn:[Adc_lCheckDriverState,Adc_lSchmExitGetStreamLastPtr,Adc_lValidateParamGroup,return]
Adc_IsrDmaSrn global:[Adc_kConfigPtr] call:[Adc_lDmaTransResUpdate,Adc_lGetDataAddress,Adc_lPrepareGrpForStart,Adc_lRemoveFromQueue,Adc_lResetTrigSrcData,Adc_lScheduleFromQueue,Adc_lScheduleNext,Adc_lSetGroupResultAtomic,Adc_lSetGroupStatusIdleAtomic,Adc_lStartHwConversionRS,Adc_lStartSwConversionRS,Adc_lStopConvRequestSource,Adc_lWriteEmuxCtrSfr,NotifFctPtr,TRUSTED_Mcal_DmaChClrIntrFlags,TRUSTED_Mcal_DmaDisableHwTransfer,TRUSTED_Mcal_DmaGetTransferIntStatus] noreturn:[Adc_lScheduleFromQueue,Adc_lStartHwConversionRS,Adc_lStartSwConversionRS,NotifFctPtr]
Adc_17_StartGtmTimer global:[Adc_kConfigPtr] call:[Adc_lGetAdcKernel,Adc_lGetKernelGroupId,Adc_lGetTimEnData,Adc_lGtmTimerCfg] noreturn:[Adc_lGtmTimerCfg]
Adc_17_StopGtmTimer global:[Adc_kConfigPtr] call:[Adc_lGetAdcKernel,Adc_lGetKernelGroupId,Adc_lGetTimEnData,Adc_lStopGtmTimer] noreturn:[Adc_lStopGtmTimer]
Adc_17_SetEruTrigger global:[Adc_kConfigPtr] call:[Adc_lEruTrigCfg,Adc_lGetAdcKernel,Adc_lGetEruData,Adc_lGetKernelGroupId] noreturn:[Adc_lEruTrigCfg]
Adc_17_ResetEruTrigger global:[Adc_kConfigPtr] call:[Adc_lGetAdcKernel,Adc_lGetEruData,Adc_lGetKernelGroupId,Adc_lResetEruCfg] noreturn:[Adc_lResetEruCfg]
Adc_17_GetGroupResult global:[Adc_kConfigPtr] call:[Adc_lAlignResultBuffer,Adc_lGetAdcKernel,Adc_lGetKernelChNum,Adc_lGetKernelGroupId,Adc_lReadResult,Adc_lValidateParamGroup,SafeMcal_ReportError,return,while] noreturn:[return]
Adc_17_GetChannelStatus global:[Adc_kConfigPtr] call:[Adc_lReadValidFlag,SafeMcal_ReportError,return] noreturn:[SafeMcal_ReportError,return]
Adc_lValidateParamGroup global:[Adc_kConfigPtr] call:[Adc_lSwConvDetCheck,Adc_lValParamGrpEnableHwTrigg,Det_ReportError,SafeMcal_ReportError,case] noreturn:[Adc_lSwConvDetCheck,Adc_lValParamGrpEnableHwTrigg,SafeMcal_ReportError]
Adc_lCheckInit global:[Adc_InitStatus] call:[Det_ReportError]
Adc_lCheckDriverState call:[Adc_lGetDataAddress,Adc_lGetGroupResult,Adc_lGetGroupStatus,Det_ReportError,case]
Adc_lCheckStateForEnableGroup global:[Adc_BgndScanData,Adc_kConfigPtr] call:[Adc_lGetDataAddress,Adc_lGetGroupStatusAll,Det_ReportError]
Adc_lCheckStateForStartGroup global:[Adc_BgndScanData,Adc_kConfigPtr] call:[Adc_lCheckResourceConflict,Adc_lGetDataAddress,Adc_lGetGroupStatus,Adc_lGetGroupStatusAll,Det_ReportError] noreturn:[Adc_lCheckResourceConflict]
Adc_lCheckGroupStatusAll call:[Adc_lGetDataAddress,Adc_lGetGroupStatusAll,Adc_lKernelConfigured,return,while] noreturn:[return]
